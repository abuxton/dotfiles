function hashiqube() {
cd ~/hashiqube
vagrant up && vagrant up --provision-with terraform-enterprise

if [ ! -f '/etc/resolver/consul']
sudo cat <<EOF > /etc/resolver/consul
nameserver 10.9.99.10
port 8600
EOF

}


function hashicorp_health() {

consul members
vault status
consul license get
vault read sys/license
terraform version

}
# export CONSUL_HTTP_ADDR=https://10.9.99.10:8501
# export CONSUL_CACERT=/etc/consul.d/tls/consul-agent-ca.pem
# export CONSUL_CLIENT_CERT=/etc/consul.d/tls/na2-client-vault-1.pem
# export CONSUL_CLIENT_KEY=/etc/consul.d/tls/na2-client-vault-1-key.pem
# export CONSUL_HTTP_TOKEN=1179c57e-4dc8-bfd7-8a38-0045c7853dd0
# export VAULT_ADDR=https://10.9.99.10:8200
# export VAULT_CACERT=/etc/consul.d/tls/consul-agent-ca.pem
# export VAULT_CLIENT_CERT=/etc/consul.d/tls/na2-client-vault-1.pem
# export VAULT_CLIENT_KEY=/etc/consul.d/tls/na2-client-vault-1-key.pem
# export VAULT_TOKEN=s.e7eXFKurWzvGQz4Ga7ViYtqt

#hashiqube settings
alias hq-vault='open http://localhost:8200'
alias hq-nomad='open http://localhost:4646'
alias hq-consul='open http://localhost:8500'
alias hq-tfe='open http://localhost:8800'
alias hq-open='open http://localhost:3333'

if [[ -x "/usr/local/bin/terraform-docs" ]]
then
  terraform-docs completion zsh > /usr/local/share/zsh/site-functions/_terraform-docs
  autoload -U compinit && compinit
fi

alias tfp-filter='terraform plan | grep "#" '
alias tfp-verbose='TF_LOG=trace terraform plan'

# nomad -autocomplete-install
complete -C /usr/local/bin/consul consul
complete -C /usr/local/bin/nomad nomad
# complete -C /usr/local/bin/vault vault

# bulk association
alias -s {tf,tfvars,json,hcl}=code

alias tg='terragrunt'
alias tf='terraform'

# vagrant extras (ontop of OMZSH)
alias vgs-prune='vgs --prune'

alias vault-api-help='echo "#Â vault <command> -output-curl-string" '
alias vault-curl-help='open https://www.vaultproject.io/api-docs#help'
alias vault-auto-completion='echo "# vault -autocomplete-install" '
alias doormat-help-acc='echo # doormat aws --account <aws-account> --tf-push --tf-organization <org> --tf-workspace <workspace>'
alias hashicorp_downloads='echo  "https://releases.hashicorp.com/" '
alias vault-flags-help='open https://www.vaultproject.io/docs/commands'
alias tcpdump-vault="echo '# sudo tcpdump -A -s 0 'tcp dst port 8200 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)' -i lo0 ||  sudo tcpdump  -i lo0 port 8200' "
alias vault-dev="echo '#export VAULT_ADDR=http://127.0.0.1:8200' && vault server -dev -dev-root-token-id=root "
alias vault-dev-ent='echo # vault-ent server  -dev-three-node -dev-root-token-id="root" '

function vault_health () {
  if [[ -z "${VAULT_ADDR}" ]]; then
    echo "# ensure the following exports are set: \n
    # export VAULT_TOKEN=<token> \n
    # export VAULT_CACERT=<path/to/cacert \n
    # export VAULT_ADDR='127.0.0.1:8200' "

  else

    echo '# vault status'
    vault status
    echo '# curl -k --header "X-Vault-Token: ${VAULT_TOKEN}"    "https://${VAULT_ADDR}/v1/sys/config/state/sanitized" | jq '
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}"    "https://${VAULT_ADDR}/v1/sys/config/state/sanitized" | jq
    echo '# curl -k https://127.0.0.1:8200/v1/sys/health | jq '
    curl -k https://127.0.0.1:8200/v1/sys/health | jq
    echo '# curl -k --header "X-Vault-Token: ${VAULT_TOKEN}"   "https://${VAULT_ADDR}/v1/sys/metrics" | jq '
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}"   "https://${VAULT_ADDR}/v1/sys/metrics" | jq
    echo '# curl -k --header "X-Vault-Token: ${VAULT_TOKEN}"   "https://${VAULT_ADDR}/v1/sys/license" | jq '
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}"   "https://${VAULT_ADDR}/v1/sys/license" | jq
    echo '# curl -k 'https://127.0.0.1:8200/v1/sys/replication/status' | jq '
    curl -k 'https://127.0.0.1:8200/v1/sys/replication/status' | jq
    echo '# curl -k --header "X-Vault-Token: ${VAULT_TOKEN}"  "https://${VAULT_ADDR}/v1/sys/storage/raft/configuration" | jq '
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}"  "https://${VAULT_ADDR}/v1/sys/storage/raft/configuration" | jq

  fi
}
#compdef _terraform-docs terraform-docs


function _terraform-docs {
  local -a commands

  _arguments -C \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "completion:Generate autocomplete for terraform-docs"
      "help:Help about any command"
      "json:Generate JSON of inputs and outputs"
      "markdown:Generate Markdown of inputs and outputs"
      "pretty:Generate colorized pretty of inputs and outputs"
      "tfvars:Generate terraform.tfvars of inputs"
      "version:Print the version number of terraform-docs"
      "xml:Generate XML of inputs and outputs"
      "yaml:Generate YAML of inputs and outputs"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  completion)
    _terraform-docs_completion
    ;;
  help)
    _terraform-docs_help
    ;;
  json)
    _terraform-docs_json
    ;;
  markdown)
    _terraform-docs_markdown
    ;;
  pretty)
    _terraform-docs_pretty
    ;;
  tfvars)
    _terraform-docs_tfvars
    ;;
  version)
    _terraform-docs_version
    ;;
  xml)
    _terraform-docs_xml
    ;;
  yaml)
    _terraform-docs_yaml
    ;;
  esac
}


function _terraform-docs_completion {
  local -a commands

  _arguments -C \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bash:Generate autocomplete for bash"
      "zsh:Generate autocomplete for zsh"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bash)
    _terraform-docs_completion_bash
    ;;
  zsh)
    _terraform-docs_completion_zsh
    ;;
  esac
}

function _terraform-docs_completion_bash {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_completion_zsh {
  _arguments \
    '(-h --help)'{-h,--help}'[help for zsh]' \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_help {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_json {
  _arguments \
    '--no-escape[do not escape special characters]' \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}


function _terraform-docs_markdown {
  local -a commands

  _arguments -C \
    '--indent[indention level of Markdown sections [1, 2, 3, 4, 5]]:' \
    '--no-escape[do not escape special characters]' \
    '--no-required[do not show "Required" column or section]' \
    '--no-sensitive[do not show "Sensitive" column or section]' \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "document:Generate Markdown document of inputs and outputs"
      "table:Generate Markdown tables of inputs and outputs"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  document)
    _terraform-docs_markdown_document
    ;;
  table)
    _terraform-docs_markdown_table
    ;;
  esac
}

function _terraform-docs_markdown_document {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--indent[indention level of Markdown sections [1, 2, 3, 4, 5]]:' \
    '--no-escape[do not escape special characters]' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-required[do not show "Required" column or section]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sensitive[do not show "Sensitive" column or section]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_markdown_table {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--indent[indention level of Markdown sections [1, 2, 3, 4, 5]]:' \
    '--no-escape[do not escape special characters]' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-required[do not show "Required" column or section]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sensitive[do not show "Sensitive" column or section]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_pretty {
  _arguments \
    '--no-color[do not colorize printed result]' \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}


function _terraform-docs_tfvars {
  local -a commands

  _arguments -C \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "hcl:Generate HCL format of terraform.tfvars of inputs"
      "json:Generate JSON format of terraform.tfvars of inputs"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  hcl)
    _terraform-docs_tfvars_hcl
    ;;
  json)
    _terraform-docs_tfvars_json
    ;;
  esac
}

function _terraform-docs_tfvars_hcl {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_tfvars_json {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_version {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_xml {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

function _terraform-docs_yaml {
  _arguments \
    '--header-from[relative path of a file to read header from]:' \
    '--no-header[do not show module header]' \
    '--no-inputs[do not show inputs]' \
    '--no-outputs[do not show outputs]' \
    '--no-providers[do not show providers]' \
    '--no-requirements[do not show module requirements]' \
    '--no-sort[do no sort items]' \
    '--output-values[inject output values into outputs]' \
    '--output-values-from[inject output values from file into outputs]:' \
    '--sort-by-required[sort items by name and print required ones first]' \
    '--sort-inputs-by-required[[deprecated] use '\''--sort-by-required'\'' instead]' \
    '--with-aggregate-type-defaults[[deprecated] print default values of aggregate types]'
}

# tecli <https://github.com/awslabs/tecli/releases/tag/>
# installed to $GOPATH/.
# AWS TE cli in go
alias tecli='tecli-darwin-amd64'
